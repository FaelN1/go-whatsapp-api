# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Run 'gofmt -s -w .'"
          gofmt -s -l .
          exit 1
        fi

    - name: Build
      run: go build -v -o bin/server ./cmd/server/main.go

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build artifacts
      if: matrix.go-version == '1.23'
      run: |
        GOOS=linux GOARCH=amd64 go build -o bin/server-linux-amd64 ./cmd/server/main.go
        GOOS=windows GOARCH=amd64 go build -o bin/server-windows-amd64.exe ./cmd/server/main.go
        GOOS=darwin GOARCH=amd64 go build -o bin/server-darwin-amd64 ./cmd/server/main.go
        GOOS=darwin GOARCH=arm64 go build -o bin/server-darwin-arm64 ./cmd/server/main.go

    - name: Upload artifacts
      if: matrix.go-version == '1.23'
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: bin/
